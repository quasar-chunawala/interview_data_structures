#include <atomic>
#include <utility>

namespace dev {

struct self_referential
{
    int i;
    int* p = &i;

    self_referential(const self_referential&) = delete;
    self_referential(self_referential&&) = delete;

    self_referential operator=(const self_referential&) = delete;
    self_referential operator=(self_referential&&) = delete;
};

/* T0

w0 = 100;
w1 = 150;

controlblock.decrement(); // acq_rel

while(r0 != 50) { ... } // guaranteed to exit
use(r0);
use(r1);

*/

/* T1

while (controlblock.use_count() != 0) { ... }

assert (w0 == 100);
do_something();

*/

/* T2

if (controlblock.use_count() > 0)
{
    r0 = 50;
}

*/

struct control_block_base {
    std::atomic<unsigned long long> m_ref_count{1};

    void increment() {
        m_ref_count.fetch_add(1u, std::memory_order::relaxed);
        // ++m_ref_count; // VR: this can be a relaxed increment, as it's just bookkeeping
    }

    auto decrement() {
        const auto result = m_ref_count.fetch_sub(1u, std::memory_order::acq_rel);
        return result;
        // return --m_ref_count; // VR: this must be a acquire+release decrement, as the dtor of `T` and subsequent code might rely on reads/writes
    }

    auto use_count() {
        return m_ref_count.load(std::memory_order::relaxed); // VR: this can also be relaxed
        // return m_ref_count.load(); // VR: this can also be relaxed
    }

    // VR: generally speaking, I would advise always using `fetch_add/sub` and `load` instead of shorthand notation for atomics
    //     as it clearly shows in the code that an atomic operation is happening

    virtual void release_shared() = 0;

    control_block_base() = default;

    control_block_base(const control_block_base&) = delete;
    control_block_base(control_block_base&&) = delete;

    control_block_base operator=(const control_block_base&) = delete;
    control_block_base operator=(control_block_base&&) = delete;
};

// VR: `increment`, `decrement`, and `use_count` are used only 1-2 times, perhaps it might make sense to just
//     inline the atomic operations

template <typename T> struct control_block : control_block_base {
    T* m_object_ptr;
    explicit control_block(T* data) : control_block_base{}, m_object_ptr{data} {}

    void release_shared() override {
        if (decrement() == 0) {
            delete m_object_ptr;
            delete this;
        }
    }
};

template <typename T> struct control_block_with_storage : control_block_base {
    T m_object; // alignas(T) char m_objectBuffer[sizeof(T)];
    template <typename... Args>
    explicit control_block_with_storage(Args&&... args)
        : control_block_base{}, m_object(std::forward<Args>(args)...) {}

    void release_shared() override {
        if (decrement() == 0) {
            delete this;
        }
    }
};

template <typename T> class shared_ptr {
  public:
    /* Default constructor*/
    shared_ptr() : m_raw_underlying_ptr{nullptr}, m_control_block_ptr{nullptr} {} ; // VR: stylistical note: mixing default init with constructors can be harder to read

    shared_ptr(T* t, control_block_base* cb) : m_raw_underlying_ptr{t}, m_control_block_ptr{cb} {} // VR: this ctor should be private

    /* Parametrized constructor : Takes ownership of the pointee */
    shared_ptr(T* ptr) : m_raw_underlying_ptr{ptr}, m_control_block_ptr{nullptr} {
        try {
            m_control_block_ptr = new control_block(ptr);
        } catch (...) {
            delete ptr;
            throw;
        }
    }

    /* Copy constructor : Implements shared co-ownership of the pointee semantics */
    shared_ptr(const shared_ptr& other)
        : m_raw_underlying_ptr{other.m_raw_underlying_ptr},
          m_control_block_ptr{other.m_control_block_ptr} {
        if (m_control_block_ptr)
            m_control_block_ptr->increment(); // Atomic pre-increment
    }

    /* Move constructor : Represents the transfer of ownership */
    shared_ptr(shared_ptr&& other) noexcept
        : m_raw_underlying_ptr{std::exchange(other.m_raw_underlying_ptr, nullptr)},
          m_control_block_ptr{std::exchange(other.m_control_block_ptr, nullptr)} {}

    /* Swap : Swap two shared_ptr objects member by member */
    void swap(shared_ptr& other) noexcept {
        using std::swap;
        std::swap(m_raw_underlying_ptr, other.m_raw_underlying_ptr);
        std::swap(m_control_block_ptr, other.m_control_block_ptr);
    }

    friend void swap(shared_ptr& lhs, shared_ptr& rhs) noexcept {
        lhs.swap(rhs);
    }

    /* Copy assignment operator : Release the current held resource
       and share the ownership of the resource specified by args */
    shared_ptr& operator=(const shared_ptr& other) {
        shared_ptr{other}.swap(*this);
        return *this;
    }

    /* Move assignment : Release the currently held resource
       and transfer the ownership of resource specified in args */
    shared_ptr& operator=(shared_ptr&& other) noexcept {
        shared_ptr{std::move(other)}.swap(*this);
        return *this;
    }

    ~shared_ptr() {
        if (m_control_block_ptr) {
            m_control_block_ptr->release_shared();
        }
    }

    // VR: general comment: use `[[nodiscard]]` for const functions wihtout side effects

    /* get() - Returns the stored pointer */
    T* get() {
        return m_raw_underlying_ptr;
    }

    const T* get() const {
        return m_raw_underlying_ptr;
    }

    T& operator*() noexcept {
        return *m_raw_underlying_ptr;
    }

    const T& operator*() const noexcept {
        return *m_raw_underlying_ptr;
    }

    T* operator->() noexcept {
        return m_raw_underlying_ptr;
    }

    const T* operator->() const noexcept {
        return m_raw_underlying_ptr;
    }

    /* Comparison operator*/
    bool operator==(const shared_ptr& other) const noexcept {
        return (m_raw_underlying_ptr == other.m_raw_underlying_ptr);
    }

    bool operator!=(const shared_ptr& other) const noexcept {
        return !(*this == other);
    }

    unsigned long long use_count() const noexcept {
        if (m_control_block_ptr)
            return m_control_block_ptr->use_count();
        else
            return 0;
    }

    /* Replaces the managed resource */
    void reset(T* ptr) {
        if (m_raw_underlying_ptr != ptr)
            shared_ptr(ptr).swap(*this);
    }

    template <typename U, typename... Args> friend shared_ptr<U> make_shared(Args&&... args);

  private:
    T* m_raw_underlying_ptr;
    control_block_base* m_control_block_ptr;
};

template <typename T, typename... Args> shared_ptr<T> make_shared(Args&&... args) {
    /* Perform a single heap memory allocation */
    auto* cb = new control_block_with_storage<T>(std::forward<Args>(args)...);
    return shared_ptr<T>(cb->m_object, cb);
}
} // namespace dev

// VR: missing features
// - converting constructor
// - weak pointer support
// - custom deleters
